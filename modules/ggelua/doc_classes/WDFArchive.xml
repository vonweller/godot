<?xml version="1.0" encoding="UTF-8" ?>
<class name="WDFArchive" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		WDF资源包文件访问器。
	</brief_description>
	<description>
		WDFArchive用于打开和访问WDF格式的资源包文件。WDF文件将多个资源文件打包存储，
		使用哈希值作为文件索引，支持快速随机访问包内的任意文件。
	</description>
	<tutorials>
		<link title="GGELUA模块使用指南">https://github.com/example/ggelua-tutorial</link>
	</tutorials>
	<methods>
		<method name="open">
			<return type="int" enum="Error" />
			<param index="0" name="path" type="String" />
			<description>
				打开WDF文件。
				返回Error.OK表示成功，其他值表示失败。
				[codeblock]
				var wdf = WDFArchive.new()
				if wdf.open("res://data.wdf") == OK:
					print("WDF文件打开成功")
					print("文件总数: ", wdf.get_file_count())
				else:
					print("WDF文件打开失败")
				[/codeblock]
			</description>
		</method>
		<method name="close">
			<return type="void" />
			<description>
				关闭当前打开的WDF文件。
				[codeblock]
				var wdf = WDFArchive.new()
				wdf.open("res://data.wdf")
				# 使用完毕后关闭
				wdf.close()
				print("WDF文件已关闭")
				[/codeblock]
			</description>
		</method>
		<method name="get_file_data">
			<return type="PackedByteArray" />
			<param index="0" name="index" type="int" />
			<description>
				根据索引获取文件的完整数据。
				[codeblock]
				var wdf = WDFArchive.new()
				if wdf.open("res://data.wdf") == OK:
					var file_data = wdf.get_file_data(0)  # 获取第一个文件
					if file_data.size() > 0:
						print("文件大小: ", file_data.size(), " 字节")
						# 检查文件头部格式
						if file_data.size() >= 4:
							var header = file_data.slice(0, 4)
							print("文件头: ", header.get_string_from_ascii())
				[/codeblock]
			</description>
		</method>
		<method name="get_file_data_by_hash">
			<return type="PackedByteArray" />
			<param index="0" name="hash" type="int" />
			<description>
				根据哈希值获取文件的完整数据。
				[codeblock]
				var wdf = WDFArchive.new()
				if wdf.open("res://data.wdf") == OK:
					# 使用已知的文件哈希值
					var hash_value = 0x12345678
					var file_data = wdf.get_file_data_by_hash(hash_value)
					if file_data.size() > 0:
						print("通过哈希找到文件，大小: ", file_data.size())
					else:
						print("未找到对应哈希的文件")
				[/codeblock]
			</description>
		</method>
		<method name="get_file_header">
			<return type="PackedByteArray" />
			<param index="0" name="index" type="int" />
			<param index="1" name="size" type="int" default="4" />
			<description>
				获取文件的头部数据，用于格式识别。
				[codeblock]
				var wdf = WDFArchive.new()
				if wdf.open("res://data.wdf") == OK:
					# 获取文件头部用于格式判断
					var header = wdf.get_file_header(0, 8)  # 获取前8字节
					if header.size() >= 4:
						var magic = header.get_string_from_ascii().substr(0, 4)
						match magic:
							"TCP1":
								print("这是TCP格式文件")
							"PNG\x89":
								print("这是PNG图片文件")
							_:
								print("未知格式: ", magic)
				[/codeblock]
			</description>
		</method>
		<method name="get_tcp_file">
			<return type="TCPLoader" />
			<param index="0" name="index" type="int" />
			<description>
				直接获取TCP格式文件并创建TCPLoader对象。
				[codeblock]
				var wdf = WDFArchive.new()
				if wdf.open("res://data.wdf") == OK:
					var tcp_loader = wdf.get_tcp_file(5)  # 获取索引5的TCP文件
					if tcp_loader:
						print("TCP文件加载成功")
						print("帧数: ", tcp_loader.get_frame_count())
						print("方向数: ", tcp_loader.get_direction_count())
						
						# 获取第一帧图像
						var image = tcp_loader.get_frame_image(0, 0)
						if image:
							print("图像尺寸: ", image.get_size())
				[/codeblock]
			</description>
		</method>
		<method name="get_tcp_file_by_hash">
			<return type="TCPLoader" />
			<param index="0" name="hash" type="int" />
			<description>
				根据哈希值获取TCP格式文件。
				[codeblock]
				var wdf = WDFArchive.new()
				if wdf.open("res://data.wdf") == OK:
					# 使用GGELUA哈希算法计算文件名哈希
					var hash_calc = GGELUAHash.new()
					var hash_value = hash_calc.calculate_hash("player.tcp")
					
					var tcp_loader = wdf.get_tcp_file_by_hash(hash_value)
					if tcp_loader:
						print("找到TCP文件: player.tcp")
						# 创建动画精灵
						var sprite = AnimatedSprite2D.new()
						# 设置TCP动画数据...
				[/codeblock]
			</description>
		</method>
		<method name="get_file_count" qualifiers="const">
			<return type="int" />
			<description>
				获取包内文件总数。
				[codeblock]
				var wdf = WDFArchive.new()
				if wdf.open("res://data.wdf") == OK:
					var count = wdf.get_file_count()
					print("WDF包含 ", count, " 个文件")
					
					# 遍历所有文件
					for i in range(count):
						var info = wdf.get_file_info(i)
						print("文件 ", i, ": 哈希=", info.hash, " 大小=", info.size)
				[/codeblock]
			</description>
		</method>
		<method name="get_file_list" qualifiers="const">
			<return type="Array" />
			<description>
				获取所有文件的信息列表，每个元素包含索引、哈希、偏移、大小等信息。
				[codeblock]
				var wdf = WDFArchive.new()
				if wdf.open("res://data.wdf") == OK:
					var file_list = wdf.get_file_list()
					print("文件列表:")
					for file_info in file_list:
						print("  索引: ", file_info.index)
						print("  哈希: 0x", "%08X" % file_info.hash)
						print("  偏移: ", file_info.offset)
						print("  大小: ", file_info.size, " 字节")
						print("  ---")
				[/codeblock]
			</description>
		</method>
		<method name="get_file_info" qualifiers="const">
			<return type="Dictionary" />
			<param index="0" name="index" type="int" />
			<description>
				获取指定索引文件的详细信息。
				[codeblock]
				var wdf = WDFArchive.new()
				if wdf.open("res://data.wdf") == OK:
					var info = wdf.get_file_info(0)
					if info.has("hash"):
						print("文件信息:")
						print("  索引: ", info.index)
						print("  哈希: 0x", "%08X" % info.hash)
						print("  偏移: ", info.offset)
						print("  大小: ", info.size)
						print("  压缩: ", info.get("compressed", false))
				[/codeblock]
			</description>
		</method>
		<method name="find_file_by_hash" qualifiers="const">
			<return type="int" />
			<param index="0" name="hash" type="int" />
			<description>
				根据哈希值查找文件索引，返回-1表示未找到。
				[codeblock]
				var wdf = WDFArchive.new()
				if wdf.open("res://data.wdf") == OK:
					# 计算文件名哈希
					var hash_calc = GGELUAHash.new()
					var target_hash = hash_calc.calculate_hash("monster.tcp")
					
					var index = wdf.find_file_by_hash(target_hash)
					if index >= 0:
						print("找到文件 monster.tcp，索引: ", index)
						var tcp_loader = wdf.get_tcp_file(index)
						# 使用TCP文件...
					else:
						print("未找到文件 monster.tcp")
				[/codeblock]
			</description>
		</method>
		<method name="get_file_path" qualifiers="const">
			<return type="String" />
			<description>
				获取当前打开的WDF文件路径。
				[codeblock]
				var wdf = WDFArchive.new()
				if wdf.open("res://data/graphics.wdf") == OK:
					var path = wdf.get_file_path()
					print("当前WDF文件: ", path)
					
					# 可以用于日志记录或调试
					print("正在处理资源包: ", path.get_file())
				[/codeblock]
			</description>
		</method>
	</methods>
</class>